##########################################
Date: Jun 17, 2021 10:47 PM
From: 53841f78c274c28c1d57bfb2159ff7e0f61ac0ba
Subject: Hostapd lib crash debug
Source: COMCAST
License: BSD
Upstream-Status: Pending
Signed-off-by: ndandu <narendravarma_dandu@comcast.com>
##########################################
--- a/source/hostap-2.9/hostapd/ctrl_iface.c	2021-06-16 02:17:40.420511763 +0000
+++ b/source/hostap-2.9/hostapd/ctrl_iface.c	2021-06-18 04:30:01.962776205 +0000
@@ -441,6 +441,42 @@ static int hostapd_ctrl_iface_nfc_report
 
 #endif /* CONFIG_WPS_NFC */
 
+#ifdef CONFIG_DRIVER_BRCM_MAP
+static int hostapd_ctrl_iface_wps_map_bh_creds(struct hostapd_data *hapd, char *txt,
+                                         char *buf, size_t buflen)
+{
+        char *pos;
+        char *ssid, *auth = NULL, *encr = NULL, *key = NULL;
+        int ret = -1;
+
+        if (!hapd->wps)
+                return -1;
+
+        ssid = txt;
+        pos = os_strchr(txt, ' ');
+        if (!pos)
+                return -1;
+        *pos++ = '\0';
+
+        auth = pos;
+        pos = os_strchr(pos, ' ');
+        if (pos) {
+                *pos++ = '\0';
+                encr = pos;
+                pos = os_strchr(pos, ' ');
+                if (pos) {
+                        *pos++ = '\0';
+                        key = pos;
+                }
+        }
+
+        if (hostapd_wps_config_map_bh(hapd, ssid, auth, encr, key) < 0) {
+                return os_snprintf(buf, buflen, "FAILED\n");
+        }
+
+        return os_snprintf(buf, buflen, "OK\n");
+}
+#endif  /* CONFIG_DRIVER_BRCM_MAP */
 
 static int hostapd_ctrl_iface_wps_ap_pin(struct hostapd_data *hapd, char *txt,
 					 char *buf, size_t buflen)
@@ -3061,6 +3097,11 @@ static int hostapd_ctrl_iface_receive_pr
 	} else if (os_strncmp(buf, "WPS_GET_STATUS", 13) == 0) {
 		reply_len = hostapd_ctrl_iface_wps_get_status(hapd, reply,
 							      reply_size);
+#ifdef CONFIG_DRIVER_BRCM_MAP
+        } else if (os_strncmp(buf, "WPS_MAPBH_CONFIG ", 17) == 0) {
+                reply_len = hostapd_ctrl_iface_wps_map_bh_creds(hapd, buf + 17,
+                                reply, reply_size);
+#endif /* CONFIG_DRIVER_BRCM_MAP */
 #ifdef CONFIG_WPS_NFC
 	} else if (os_strncmp(buf, "WPS_NFC_TAG_READ ", 17) == 0) {
 		if (hostapd_ctrl_iface_wps_nfc_tag_read(hapd, buf + 17))
--- a/source/hostap-2.9/hostapd/hostapd_cli.c	2021-06-16 02:17:37.844592401 +0000
+++ b/source/hostap-2.9/hostapd/hostapd_cli.c	2021-06-18 04:32:57.029442459 +0000
@@ -643,9 +643,32 @@ static int hostapd_cli_cmd_wps_config(st
 			 ssid_hex, argv[1]);
 	return wpa_ctrl_command(ctrl, buf);
 }
+#ifdef CONFIG_DRIVER_BRCM_MAP
+static int hostapd_cli_cmd_wps_mapbh_config(struct wpa_ctrl *ctrl, int argc,
+                                      char *argv[])
+{
+        char buf[256];
+
+        if (argc < 1) {
+                printf("Invalid 'wps_mapbh_config' command - at least two arguments "
+                       "are required.\n");
+                return -1;
+        }
+
+        if (argc > 3)
+                snprintf(buf, sizeof(buf), "WPS_MAPBH_CONFIG %s %s %s %s",
+                         argv[0], argv[1], argv[2], argv[3]);
+        else if (argc > 2)
+                snprintf(buf, sizeof(buf), "WPS_MAPBH_CONFIG %s %s %s",
+                        argv[0], argv[1], argv[2]);
+        else
+                snprintf(buf, sizeof(buf), "WPS_MAPBH_CONFIG %s %s",
+                         argv[0], argv[1]);
+        return wpa_ctrl_command(ctrl, buf);
+}
+#endif  /* CONFIG_DRIVER_BRCM_MAP */
 #endif /* CONFIG_WPS */
 
-
 static int hostapd_cli_cmd_disassoc_imminent(struct wpa_ctrl *ctrl, int argc,
 					     char *argv[])
 {
@@ -1571,6 +1594,10 @@ static const struct hostapd_cli_cmd host
 	  "<SSID> <auth> <encr> <key> = configure AP" },
 	{ "wps_get_status", hostapd_cli_cmd_wps_get_status, NULL,
 	  "= show current WPS status" },
+#ifdef CONFIG_DRIVER_BRCM_MAP
+        { "wps_mapbh_config", hostapd_cli_cmd_wps_mapbh_config, NULL,
+          "<SSID> <auth> <encr> <key> = update multiap backhaul config" },
+#endif /* CONFIG_DRIVER_BRCM_MAP */
 #endif /* CONFIG_WPS */
 	{ "disassoc_imminent", hostapd_cli_cmd_disassoc_imminent, NULL,
 	  "= send Disassociation Imminent notification" },
--- a/source/hostap-2.9/src/ap/ap_config.h	2021-06-16 02:17:37.852592151 +0000
+++ b/source/hostap-2.9/src/ap/ap_config.h	2021-06-18 04:34:04.531382647 +0000
@@ -734,6 +734,16 @@ struct hostapd_bss_config {
 #define FRONTHAUL_BSS 2
 	int multi_ap; /* bitmap of BACKHAUL_BSS, FRONTHAUL_BSS */
 
+#ifdef CONFIG_DRIVER_BRCM_MAP
+        u8 map;
+        u8 map_bh_ssid[SSID_MAX_LEN];
+        size_t map_bh_ssid_len;
+        u16 map_bh_auth;
+        u16 map_bh_encr;
+        u8 map_bh_psk[PMK_LEN_MAX];
+        size_t map_bh_psk_len;
+#endif  /* CONFIG_DRIVER_BRCM_MAP */
+
 #ifdef CONFIG_AIRTIME_POLICY
 	unsigned int airtime_weight;
 	int airtime_limit;
--- a/source/hostap-2.9/src/ap/wps_hostapd.c	2021-06-16 02:17:37.900590649 +0000
+++ b/source/hostap-2.9/src/ap/wps_hostapd.c	2021-06-18 04:26:59.680312686 +0000
@@ -403,6 +403,122 @@ static int hapd_wps_reconfig_in_memory(s
 	return 0;
 }
 
+#ifdef CONFIG_DRIVER_BRCM
+static void hapd_wps_write_creds_to_file(FILE *nconf, struct hostapd_data *hapd,
+                const struct wps_credential *cred)
+{
+        int wpa;
+        int i;
+        int sae = 0;
+
+        fprintf(nconf, "# WPS configuration - START\n");
+
+        fprintf(nconf, "wps_state=2\n");
+
+        if (is_hex(cred->ssid, cred->ssid_len)) {
+                fprintf(nconf, "ssid2=");
+                for (i = 0; i < cred->ssid_len; i++)
+                        fprintf(nconf, "%02x", cred->ssid[i]);
+                fprintf(nconf, "\n");
+        } else {
+                fprintf(nconf, "ssid=");
+                for (i = 0; i < cred->ssid_len; i++)
+                        fputc(cred->ssid[i], nconf);
+                fprintf(nconf, "\n");
+        }
+
+        if ((cred->auth_type & (WPS_AUTH_WPA2 | WPS_AUTH_WPA2PSK)) &&
+            (cred->auth_type & (WPS_AUTH_WPA | WPS_AUTH_WPAPSK)))
+                wpa = 3;
+        else if (cred->auth_type & (WPS_AUTH_WPA2 | WPS_AUTH_WPA2PSK))
+                wpa = 2;
+        else if (cred->auth_type & (WPS_AUTH_WPA | WPS_AUTH_WPAPSK))
+                wpa = 1;
+        else
+                wpa = 0;
+
+        if (wpa) {
+                char *prefix;
+                if (cred->auth_type & WPS_AUTH_WPA2PSK
+                        /* Sae needs credential in passphrase-form */
+                        && (cred->key_len >= 8 && cred->key_len < 64)
+                        && hapd->conf->wps_cred_add_sae) {
+                        /* wpa needs to be set to 2 for transition mode (WPA2-PSK + WPA3-SAE) */
+                        sae = 1;
+                        wpa = 2;
+                }
+
+                fprintf(nconf, "wpa=%d\n", wpa);
+
+                fprintf(nconf, "wpa_key_mgmt=");
+                prefix = "";
+                if (cred->auth_type & (WPS_AUTH_WPA2 | WPS_AUTH_WPA)) {
+                        fprintf(nconf, "WPA-EAP");
+                        prefix = " ";
+                }
+                if (cred->auth_type & (WPS_AUTH_WPA2PSK | WPS_AUTH_WPAPSK)) {
+                        fprintf(nconf, "%sWPA-PSK", prefix);
+                        prefix=" ";
+                }
+                if (sae)
+                        fprintf(nconf, "%sSAE", prefix);
+
+                fprintf(nconf, "\n");
+
+                /* ieee80211w may setup as 0 */
+                if (sae && hapd->conf->ieee80211w == NO_MGMT_FRAME_PROTECTION) {
+                        fprintf(nconf, "ieee80211w=%d\n",
+                                MGMT_FRAME_PROTECTION_OPTIONAL);
+                } else {
+                        /* fill current setting */
+                        fprintf(nconf, "ieee80211w=%d\n", hapd->conf->ieee80211w);
+                }
+
+                /* asumme sae_require_mfp is always set when wps_cred_add_sae set */
+
+                fprintf(nconf, "wpa_pairwise=");
+                prefix = "";
+                if (cred->encr_type & WPS_ENCR_AES) {
+                        if (hapd->iconf->hw_mode == HOSTAPD_MODE_IEEE80211AD)
+                                fprintf(nconf, "GCMP");
+                        else
+                                fprintf(nconf, "CCMP");
+
+                        prefix = " ";
+                }
+                if (!sae && cred->encr_type & WPS_ENCR_TKIP) {
+                        fprintf(nconf, "%sTKIP", prefix);
+                }
+                fprintf(nconf, "\n");
+
+                if (cred->key_len >= 8 && cred->key_len < 64) {
+                        fprintf(nconf, "wpa_passphrase=");
+                        for (i = 0; i < cred->key_len; i++)
+                                fputc(cred->key[i], nconf);
+                        fprintf(nconf, "\n");
+                } else if (cred->key_len == 64) {
+                        fprintf(nconf, "wpa_psk=");
+                        for (i = 0; i < cred->key_len; i++)
+                                fputc(cred->key[i], nconf);
+                        fprintf(nconf, "\n");
+                } else {
+                        wpa_printf(MSG_WARNING, "WPS: Invalid key length %lu "
+                                   "for WPA/WPA2",
+                                   (unsigned long) cred->key_len);
+                }
+
+                fprintf(nconf, "auth_algs=1\n");
+        } else {
+                /*
+                 * WPS 2.0 does not allow WEP to be configured, so no need to
+                 * process that option here either.
+                 */
+                fprintf(nconf, "auth_algs=1\n");
+        }
+
+        fprintf(nconf, "# WPS configuration - END\n");
+}
+#endif  /* CONFIG_DRIVER_BRCM */
 
 static int hapd_wps_cred_cb(struct hostapd_data *hapd, void *ctx)
 {
@@ -414,6 +530,10 @@ static int hapd_wps_cred_cb(struct hosta
 	int multi_bss;
 	int wpa;
 	int pmf_changed = 0;
+#ifdef CONFIG_DRIVER_BRCM
+        char ifr_token[32], bss_token[32];
+        int bss_found, wps_cred_updated_in_newconf, bss_token_len, ifr_token_len;
+#endif  /* CONFIG_DRIVER_BRCM */
 
 	if (hapd->wps == NULL)
 		return 0;
@@ -505,6 +625,52 @@ static int hapd_wps_cred_cb(struct hosta
 		return -1;
 	}
 
+#ifdef CONFIG_DRIVER_BRCM
+        os_snprintf(ifr_token, sizeof(ifr_token), "interface=%s", hapd->conf->iface);
+        ifr_token_len = strlen(ifr_token);
+        os_snprintf(bss_token, sizeof(bss_token), "bss=%s", hapd->conf->iface);
+        bss_token_len = strlen(bss_token);
+        bss_found = wps_cred_updated_in_newconf = 0;
+        multi_bss = 0;
+        while (fgets(buf, sizeof(buf), oconf)) {
+                /* This is to handle the case for multiple bss lets say we have 3 bss enabled bss1,
+                 * bss2 and bss3. Wps running on bss2 should not update the settings of bss3.
+                 */
+                if (bss_found && os_strncmp(buf, "bss=", 4) == 0) {
+                        multi_bss = 1;
+                }
+
+                /* Find the bss entry which needs to be updated */
+                if (!bss_found && (os_strncmp(buf, bss_token, bss_token_len) == 0 ||
+                        os_strncmp(buf, ifr_token, ifr_token_len) == 0)) {
+                        bss_found = 1;
+                }
+
+                if (bss_found && !multi_bss &&
+                    (str_starts(buf, "ssid=") ||
+                     str_starts(buf, "ssid2=") ||
+                     str_starts(buf, "auth_algs=") ||
+                     str_starts(buf, "wep_default_key=") ||
+                     str_starts(buf, "wep_key") ||
+                     str_starts(buf, "wps_state=") ||
+                     str_starts(buf, "wpa=") ||
+                     str_starts(buf, "wpa_psk=") ||
+                     str_starts(buf, "wpa_pairwise=") ||
+                     str_starts(buf, "rsn_pairwise=") ||
+                     str_starts(buf, "wpa_key_mgmt=") ||
+                     str_starts(buf, "ieee80211w=") ||
+                     str_starts(buf, "wpa_passphrase="))) {
+                        fprintf(nconf, "#WPS# %s", buf);
+                } else
+                        fprintf(nconf, "%s", buf);
+
+                /* Write the wps credentials in new conf file */
+                if (bss_found && !wps_cred_updated_in_newconf) {
+                        hapd_wps_write_creds_to_file(nconf, hapd, cred);
+                        wps_cred_updated_in_newconf = 1;
+                }
+        }
+#else   /* !CONFIG_DRIVER_BRCM */
 	fprintf(nconf, "# WPS configuration - START\n");
 
 	fprintf(nconf, "wps_state=2\n");
@@ -633,6 +799,7 @@ static int hapd_wps_cred_cb(struct hosta
 		} else
 			fprintf(nconf, "%s", buf);
 	}
+#endif  /* CONFIG_DRIVER_BRCM */
 
 	fclose(nconf);
 	fclose(oconf);
@@ -818,14 +985,28 @@ static void hostapd_wps_event_fail(struc
 
 	if (fail->error_indication > 0 &&
 	    fail->error_indication < NUM_WPS_EI_VALUES) {
+#ifdef CONFIG_DRIVER_BRCM
+                wpa_msg(hapd->msg_ctx, MSG_INFO,
+                        WPS_EVENT_FAIL "msg=%d peer_macaddr="MACSTR" config_error=%d "
+                        "reason=%d (%s)", fail->msg, MAC2STR(fail->peer_macaddr),
+                        fail->config_error, fail->error_indication,
+                        wps_ei_str(fail->error_indication));
+#else
 		wpa_msg(hapd->msg_ctx, MSG_INFO,
 			WPS_EVENT_FAIL "msg=%d config_error=%d reason=%d (%s)",
 			fail->msg, fail->config_error, fail->error_indication,
 			wps_ei_str(fail->error_indication));
+#endif  /* CONFIG_DRIVER_BRCM */
 	} else {
+#ifdef CONFIG_DRIVER_BRCM
+                wpa_msg(hapd->msg_ctx, MSG_INFO,
+                        WPS_EVENT_FAIL "msg=%d peer_macaddr="MACSTR" config_error=%d",
+                        fail->msg, MAC2STR(fail->peer_macaddr), fail->config_error);
+#else
 		wpa_msg(hapd->msg_ctx, MSG_INFO,
 			WPS_EVENT_FAIL "msg=%d config_error=%d",
 			fail->msg, fail->config_error);
+#endif  /* CONFIG_DRIVER_BRCM */
 	}
 }
 
@@ -1199,7 +1380,16 @@ int hostapd_init_wps(struct hostapd_data
 
 	wps->ap_settings = conf->ap_settings;
 	wps->ap_settings_len = conf->ap_settings_len;
-
+#ifdef CONFIG_DRIVER_BRCM_MAP
+        wps->map = conf->map;
+        os_memset(&wps->bh_creds, 0, sizeof(wps->bh_creds));
+        wps->bh_creds.ssid_len = conf->map_bh_ssid_len;
+        os_memcpy(wps->bh_creds.ssid, conf->map_bh_ssid, wps->bh_creds.ssid_len);
+        wps->bh_creds.auth_type = conf->map_bh_auth;
+        wps->bh_creds.encr_type = conf->map_bh_encr;
+        wps->bh_creds.key_len = conf->map_bh_psk_len;
+        os_memcpy(wps->bh_creds.key, conf->map_bh_psk, wps->bh_creds.key_len);
+#endif  /* CONFIG_DRIVER_BRCM_MAP */
 	cfg.new_psk_cb = hostapd_wps_new_psk_cb;
 	cfg.set_ie_cb = hostapd_wps_set_ie_cb;
 	cfg.pin_needed_cb = hostapd_wps_pin_needed_cb;
@@ -1778,6 +1968,55 @@ int hostapd_wps_config_ap(struct hostapd
 	return wps_registrar_config_ap(hapd->wps->registrar, &cred);
 }
 
+#ifdef CONFIG_DRIVER_BRCM_MAP
+int hostapd_wps_config_map_bh(struct hostapd_data *hapd, const char *ssid,
+                const char *auth, const char *encr, const char *key)
+{
+        struct wps_credential cred;
+        size_t len;
+
+        os_memset(&cred, 0, sizeof(cred));
+
+        len = os_strlen(ssid);
+        if ((len <= 0) || len > sizeof(cred.ssid))
+                return -1;
+        cred.ssid_len = len;
+        os_memcpy(cred.ssid, ssid, len);
+
+        if (os_strncmp(auth, "OPEN", 4) == 0)
+                cred.auth_type = WPS_AUTH_OPEN;
+        else if (os_strncmp(auth, "WPAPSK", 6) == 0)
+                cred.auth_type = WPS_AUTH_WPAPSK;
+        else if (os_strncmp(auth, "WPA2PSK", 7) == 0)
+                cred.auth_type = WPS_AUTH_WPA2PSK;
+        else
+                return -1;
+
+        if (encr) {
+                if (os_strncmp(encr, "NONE", 4) == 0)
+                        cred.encr_type = WPS_ENCR_NONE;
+                else if (os_strncmp(encr, "TKIP", 4) == 0)
+                        cred.encr_type = WPS_ENCR_TKIP;
+                else if (os_strncmp(encr, "CCMP", 4) == 0)
+                        cred.encr_type = WPS_ENCR_AES;
+                else
+                        return -1;
+        } else
+                cred.encr_type = WPS_ENCR_NONE;
+
+        if (key) {
+                len = os_strlen(key);
+                if (len <= 8 && len > sizeof(cred.key)) {
+                        return -1;
+                }
+                cred.key_len = len;
+                os_memcpy(cred.key, key, len);
+        }
+
+        os_memcpy(&hapd->wps->bh_creds, &cred, sizeof(hapd->wps->bh_creds));
+        return 0;
+}
+#endif /* CONFIG_DRIVER_BRCM_MAP */
 
 #ifdef CONFIG_WPS_NFC
 
--- a/source/hostap-2.9/src/ap/wps_hostapd.h	2021-06-16 02:17:37.900590649 +0000
+++ b/source/hostap-2.9/src/ap/wps_hostapd.h	2021-06-18 04:35:11.613334167 +0000
@@ -32,6 +32,10 @@ int hostapd_wps_ap_pin_set(struct hostap
 void hostapd_wps_update_ie(struct hostapd_data *hapd);
 int hostapd_wps_config_ap(struct hostapd_data *hapd, const char *ssid,
 			  const char *auth, const char *encr, const char *key);
+#ifdef CONFIG_DRIVER_BRCM_MAP
+int hostapd_wps_config_map_bh(struct hostapd_data *hapd, const char *ssid,
+                          const char *auth, const char *encr, const char *key);
+#endif  /* CONFIG_DRIVER_BRCM_MAP */
 int hostapd_wps_nfc_tag_read(struct hostapd_data *hapd,
 			     const struct wpabuf *data);
 struct wpabuf * hostapd_wps_nfc_config_token(struct hostapd_data *hapd,
--- a/source/hostap-2.9/src/wps/wps_attr_parse.c	2021-06-16 02:17:38.360576249 +0000
+++ b/source/hostap-2.9/src/wps/wps_attr_parse.c	2021-06-18 05:07:52.123815828 +0000
@@ -67,6 +67,15 @@ static int wps_set_vendor_ext_wfa_subele
 		}
 		attr->registrar_configuration_methods = pos;
 		break;
+#ifdef CONFIG_DRIVER_BRCM_MAP
+        case WFA_ELEM_MAP_EXTENSION_ATTR:
+                if (len < 1) {
+                        wpa_printf(MSG_DEBUG, "WPS: Invalid multiap extension attr %u", len);
+                        return -1;
+                }
+                attr->map_ext_attr = pos;
+                break;
+#else
 	case WFA_ELEM_MULTI_AP:
 		if (len != 1) {
 			wpa_printf(MSG_DEBUG,
@@ -78,6 +87,7 @@ static int wps_set_vendor_ext_wfa_subele
 		wpa_printf(MSG_DEBUG, "WPS: Multi-AP Extension 0x%02x",
 			   attr->multi_ap_ext);
 		break;
+#endif  /* CONFIG_DRIVER_BRCM_MAP */
 	default:
 		wpa_printf(MSG_MSGDUMP, "WPS: Skipped unknown WFA Vendor "
 			   "Extension subelement %u", id);
--- a/source/hostap-2.9/src/wps/wps_attr_parse.h	2021-06-16 02:17:38.360576249 +0000
+++ b/source/hostap-2.9/src/wps/wps_attr_parse.h	2021-06-18 04:37:10.537699524 +0000
@@ -56,6 +56,9 @@ struct wps_parse_attr {
 	const u8 *request_to_enroll; /* 1 octet (Bool) */
 	const u8 *ap_channel; /* 2 octets */
 	const u8 *registrar_configuration_methods; /* 2 octets */
+#ifdef CONFIG_DRIVER_BRCM_MAP
+        const u8 *map_ext_attr; /* 1 octet */
+#endif  /* CONFIG_DRIVER_BRCM_MAP */
 
 	/* variable length fields */
 	const u8 *manufacturer;
--- a/source/hostap-2.9/src/wps/wps_defs.h	2021-06-16 02:17:38.360576249 +0000
+++ b/source/hostap-2.9/src/wps/wps_defs.h	2021-06-18 04:39:13.461939410 +0000
@@ -153,7 +153,10 @@ enum {
 	WFA_ELEM_REQUEST_TO_ENROLL = 0x03,
 	WFA_ELEM_SETTINGS_DELAY_TIME = 0x04,
 	WFA_ELEM_REGISTRAR_CONFIGURATION_METHODS = 0x05,
-	WFA_ELEM_MULTI_AP = 0x06
+	WFA_ELEM_MULTI_AP = 0x06,
+#ifdef CONFIG_DRIVER_BRCM_MAP
+        WFA_ELEM_MAP_EXTENSION_ATTR = 0x06,
+#endif  /* CONFIG_DRIVER_BRCM_MAP */
 };
 
 /* Device Password ID */
@@ -381,4 +384,9 @@ enum wps_response_type {
 
 #define WPS_MAX_AUTHORIZED_MACS 5
 
+#ifdef CONFIG_DRIVER_BRCM_MAP
+#define WPS_MAP_BH_STA          0x80
+#define WPS_MAP_FH_BSS          0x20
+#endif  /* CONFIG_DRIVER_BRCM_MAP */
+
 #endif /* WPS_DEFS_H */
--- a/source/hostap-2.9/src/wps/wps.h	2021-06-16 02:17:38.360576249 +0000
+++ b/source/hostap-2.9/src/wps/wps.h	2021-06-18 04:35:56.471963567 +0000
@@ -837,6 +837,10 @@ struct wps_context {
 	struct wpabuf *ap_nfc_dh_pubkey;
 	struct wpabuf *ap_nfc_dh_privkey;
 	struct wpabuf *ap_nfc_dev_pw;
+#ifdef CONFIG_DRIVER_BRCM_MAP
+        u8 map;
+        struct wps_credential bh_creds; /* Multiap backhaul credentials */
+#endif  /* CONFIG_DRIVER_BRCM_MAP */
 };
 
 struct wps_registrar *
--- a/source/hostap-2.9/src/wps/wps_i.h	2021-06-16 02:17:38.360576249 +0000
+++ b/source/hostap-2.9/src/wps/wps_i.h	2021-06-18 04:47:45.639144622 +0000
@@ -127,6 +127,9 @@ struct wps_data {
 	struct wps_nfc_pw_token *nfc_pw_token;
 
 	int multi_ap_backhaul_sta;
+#ifdef CONFIG_DRIVER_BRCM_MAP
+        u8 map_ext_attr_e;              /* Enrolee multiap extension attribute */
+#endif  /* CONFIG_DRIVER_BRCM_MAP */
 };
 
 
--- a/source/hostap-2.9/src/wps/wps_registrar.c	2021-06-16 02:17:38.360576249 +0000
+++ b/source/hostap-2.9/src/wps/wps_registrar.c	2021-06-18 05:00:37.712740382 +0000
@@ -1653,6 +1653,20 @@ int wps_build_cred(struct wps_data *wps,
 	}
 	os_memset(&wps->cred, 0, sizeof(wps->cred));
 
+#ifdef CONFIG_DRIVER_BRCM_MAP
+        /* For multiap backhaul sta use the backhaul ssid and password */
+        if ((wps->map_ext_attr_e == WPS_MAP_BH_STA) && (wps->wps->map & WPS_MAP_FH_BSS) &&
+                        wps->wps->bh_creds.ssid_len > 0) {
+                os_memcpy(wps->cred.ssid, wps->wps->bh_creds.ssid, wps->wps->bh_creds.ssid_len);
+                wps->cred.ssid_len = wps->wps->bh_creds.ssid_len;
+                wps->cred.auth_type = wps->wps->bh_creds.auth_type;
+                wps->cred.encr_type = wps->wps->bh_creds.encr_type;
+                os_memcpy(wps->cred.mac_addr, wps->mac_addr_e, ETH_ALEN);
+                os_memcpy(wps->cred.key, wps->wps->bh_creds.key, wps->wps->bh_creds.key_len);
+                wps->cred.key_len = wps->wps->bh_creds.key_len;
+                goto use_provided;
+        }
+#else
 	if (wps->peer_dev.multi_ap_ext == MULTI_AP_BACKHAUL_STA &&
 	    reg->multi_ap_backhaul_ssid_len) {
 		wpa_printf(MSG_DEBUG, "WPS: Use backhaul STA credentials");
@@ -1675,6 +1689,7 @@ int wps_build_cred(struct wps_data *wps,
 		}
 		goto use_provided;
 	}
+#endif  /* CONFIG_DRIVER_BRCM_MAP */
 
 	os_memcpy(wps->cred.ssid, wps->wps->ssid, wps->wps->ssid_len);
 	wps->cred.ssid_len = wps->wps->ssid_len;
@@ -2611,6 +2626,21 @@ static int wps_process_config_error(stru
 	return 0;
 }
 
+#ifdef CONFIG_DRIVER_BRCM_MAP
+static int wps_process_map_ext_attr(struct wps_data *wps, const u8 *map)
+{
+        if (map == NULL) {
+                wpa_printf(MSG_DEBUG, "WPS: No multiap extension attribute received");
+                wps->map_ext_attr_e = 0;
+                return 0;
+        }
+
+        wps->map_ext_attr_e = *map;
+        wpa_printf(MSG_DEBUG, "WPS: Enrollee Multiap Extension Attr %d", wps->map_ext_attr_e);
+
+        return 0;
+}
+#endif  /* CONFIG_DRIVER_BRCM_MAP */
 
 static int wps_registrar_p2p_dev_addr_match(struct wps_data *wps)
 {
@@ -2676,7 +2706,11 @@ static enum wps_process_res wps_process_
 	    wps_process_assoc_state(wps, attr->assoc_state) ||
 	    wps_process_dev_password_id(wps, attr->dev_password_id) ||
 	    wps_process_config_error(wps, attr->config_error) ||
-	    wps_process_os_version(&wps->peer_dev, attr->os_version))
+	    wps_process_os_version(&wps->peer_dev, attr->os_version) ||
+#ifdef CONFIG_DRIVER_BRCM_MAP
+            wps_process_map_ext_attr(wps, attr->map_ext_attr) ||
+#endif  /* CONFIG_DRIVER_BRCM_MAP */
+            0 )
 		return WPS_FAILURE;
 
 	if (wps->dev_pw_id < 0x10 &&
--- a/source/hostap-2.9/src/wps/wps_validate.c	2021-06-16 02:17:38.364576123 +0000
+++ b/source/hostap-2.9/src/wps/wps_validate.c	2021-06-18 05:03:05.360360274 +0000
@@ -421,6 +421,24 @@ static int wps_validate_request_to_enrol
 	return 0;
 }
 
+#ifdef CONFIG_DRIVER_BRCM_MAP
+static int wps_validate_map_ext_attr(const u8 *map_ext_attr, int mandatory)
+{
+        if (map_ext_attr == NULL) {
+                if (mandatory) {
+                        wpa_printf(MSG_INFO, "WPS-STRICT: multiap extension attribute missing");
+                        return -1;
+                }
+                return 0;
+        }
+        if (*map_ext_attr != WPS_MAP_BH_STA) {
+                wpa_printf(MSG_INFO, "WPS-STRICT: Invalid multiap extension "
+                           "attribute value 0x%x", *map_ext_attr);
+                return -1;
+        }
+        return 0;
+}
+#endif  /* CONFIG_DRIVER_BRCM_MAP */
 
 static int wps_validate_req_dev_type(const u8 *req_dev_type[], size_t num,
 				     int mandatory)
@@ -1324,7 +1342,11 @@ int wps_validate_m1(const struct wpabuf
 	    wps_validate_config_error(attr.config_error, 1) ||
 	    wps_validate_os_version(attr.os_version, 1) ||
 	    wps_validate_version2(attr.version2, wps2) ||
-	    wps_validate_request_to_enroll(attr.request_to_enroll, 0)) {
+	    wps_validate_request_to_enroll(attr.request_to_enroll, 0) ||
+#ifdef CONFIG_DRIVER_BRCM_MAP
+            wps_validate_map_ext_attr(attr.map_ext_attr, 0) ||
+#endif  /* CONFIG_DRIVER_BRCM_MAP */
+            0) {
 		wpa_printf(MSG_INFO, "WPS-STRICT: Invalid M1");
 #ifdef WPS_STRICT_WPS2
 		if (wps2)
